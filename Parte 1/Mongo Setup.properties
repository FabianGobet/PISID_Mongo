# Instalar Docker Desktop
# Criar 3 containers, cada um com o respetivo servidor mongo. master, slave1 e slave2 são os nomes de cada container
docker run -d -it -p 30000:27017 --name master ubuntu:jammy
docker run -d -it -p 30001:27017 --name slave1 ubuntu:jammy
docker run -d -it -p 30002:27017 --name slave2 ubuntu:jammy

# Adicionar regras à firewall para permitir o tráfego inboud das portas 30000,30001 e 30001
> Windows Firewall Defender > Advanced Settings > New Rule > Port > TCP > Specific local ports: 30001-30003 > Allow Connection > Check em todas as redes > Dar um nome > Finish
# TODOS OS COMANDOS DENTRO DE CONTAINERS SÃO AUTOMATICAMENTE EXECUTADOS EM SUDO

[# Abrir porta no router]
> Aceder ao router com p ip e pass discriminados no router
> Aceder à funcionalidade de Port Mapping / Port Forwarding
> Adicionar port mapping para TCP, para o equipamento onde estao a correr os servers (ver ip da LAN do dispositivo)
> Se houver opção de faixa de portas, usar de 30000-30002 para portos publicos e faixas de portas LAN. Senão fazer o memso mas um a um

[# Em CADA CONTAINER, tal que [NOME_SERVER] é o nome do container (i.e. master,slave1,...), no terminal executar esta sequência de comandos. Em alguns é precisor escrever 'y' e carregar enter]
> bash
> apt-get update
> apt-get upgrade -y
> apt-get install vim -y
> apt-get install gnupg -y
> apt-get install wget -y
> apt-get install curl -y
> apt-get install iputils-ping -y
> curl -fsSL https://pgp.mongodb.com/server-6.0.asc | gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
> echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list
> apt-get update
> apt-get install -y original-awk
> apt-get install -y man
> apt-get install -y mongodb-org 
# Escolher 8 (Europe) e 25 (lisbon)

[# Criar pastas para a nossa DB e copiar ficheiro de configurações]
#Substituir [NOME_SERVER] com o nome do server
> mkdir mongo && cd mongo && mkdir data && mkdir log && cd log && touch mongod.log && cd .. && cd data && mkdir mqttData && cd mqttData && mkdir [NOME_SERVER] && cp /etc/mongod.conf /mongo/mongod.conf

[# Teste de instalação]
> cd /mongo
> mongod -f mongod.conf --fork
> ps aux
# Confirmar que existe uma entrada para COMMAND = mongod -f mongod.conf --fork. Deve-se anotar o numero de PID dessa entrada,a qual iremos denominar de [PID]
> mongosh
# Neste moento devem ter acedido ao shell do servidor mongo que lançaram. (test>) Quer dizer que esta tudo bem
> exit
> kill -9 [PID]

[# Depois de fazer o teste, vamos começar a especificar cada um dos ficheiros de configuração (mongod.conf) dos servidores.]
> vi /mongo/mongod.conf

# Nota: Para começar a escrever no vi carregam 'i'. Fazem as edições todas que têm a fazer, e no final carregam ESC, escrevem ':wq' e carregam ENTER
# Para cada class (storage, net, replication) devem por estas definições.

storage:
  dbPath: /mongo/data/mqttData/[NOME_SERVER]

net:
  port: 27017
  bindIp: 0.0.0.0
  
# ReplSet é apenas um nome, podem por outro nome para a replica
replication:
  replSetName: ReplSet

[# Agora vamos ligar os servidores e designar o master como primário]
# Devem agora ir à net e pesquisar pelo vosso Ipv4 publico. Para efeitos de exemplo, vamos supor que é X.X.X.X.
# Em todos os terminais dos servidores, executar
> echo "X.X.X.X master" >> /etc/hosts && echo "X.X.X.X slave1" >> /etc/hosts && echo "X.X.X.X slave2" >> /etc/hosts

# No sistem operativo externo (fora do container) é também necessário resolver estes endereços se vamos usar Mongo Driver Connector em javaop
# Em windows, executar CMD como administrador e executar
> echo "X.X.X.X master" >> C:/Windows/System32/drivers/etc/hosts/etc/hosts && echo "X.X.X.X slave1" >> C:/Windows/System32/drivers/etc/hosts/etc/hosts && echo "X.X.X.X slave2" >> C:/Windows/System32/drivers/etc/hosts/etc/hosts

# No terminal do slave1 e slave2, executar
> cd /mongo && mongod -f mongod.conf --fork

# No terminal do master executar
> cd /mongo && mongod -f mongod.conf --fork
> mongosh
> rs.initiate({ _id: "ReplSet", members: [{ _id: 0, host: "master:30000", priority: 1, votes: 1}{ _id: 1, host: "slave1:30001", priority: 0.9, votes: 1}, { _id: 2, host: "slave2:30002",priority: 1, votes: 1}]})
# Ou então
> rs.initiate()
> rs.add({host...})
# Se tudo correu bem podem executar rs.conf() e rs.status() para verificar informação sobre o set de replicas. 

# Em caso de engano podem sempre aceder aos atributos desta forma e altera-los
> cfg = rs.conf()
> cfg.members[1].priority=0.9
> cfg.members[2].priority=0.8
> rs.reconfig(cfg)



# Neste momento temos os 3 servidores ligados em replica-set. O servidor master é primario (PRIMARY) porque tem prioridade 1. 
# Os outros são secondary tal que slave1 tem mais prioridade que slave 2.
#
# Em qualquer um dos terminais podem executar mongosh para aceder ao servidor que esta a correr, e ver as bds
# 
# Também podem aceder a qualquer um dos terminais de forma exterior ao servidor onde este esteja a correr.
# Numa maquina que tenha o mongosh instalado, considerando que a porta do servidor ao qual queremos aceder é uma das 30001, 30002, 30003, basta escrever:
> mongosh --host X.X.X.X --port 30001

[# Queremos agora implementar autenticação e autorização para os nossos servidores]
# No servidor master, acedendo via mongosh, devem executar
> use admin
> db.createUser({user: "root", pwd: "root", roles: [ "root" ]})
> use mqttData
> db.createUser({user: "javaop", pwd: "javaop", roles: [ { role: "readWrite", db: "mqttData" } ]})
> db.getUsers()
# Podem no precedido comando verificar que este user foi criado
# Temos de criar um ficheiro de chave a ser utilizado em todos os servidores
> exit
# Deve agora ter saido do mongosh e estar no diretorio /mongo, senão > cd /mongo
> openssl rand -base64 756 > keyfile
> chmod 400 keyfile
# O ficheiro keyfile criado no servidor master na pasta /mongo tem de ser extraido e copiado para as mesmas pastas /mongo dos restantes servidores
# IMPORTANTE: Não esquecer repetir o comando 'chmod 400 keyfile' na pasta /mongo para dar permissões de acesso ao ficheiro
# O Docker Desktop tem funcionalidade que permite ver os ficheiros dentro do container e extrair ou edita-los

# EM TODOS os servidores devem fazer o seguinte:
> vi mongod.conf
# Devem agora apagar os caracteres '#' cardinal que estão na classe security e editar a estrutura de forma a ficar:
# Nota: Para começar a escrever no vi carregam 'i'. Fazem as edições todas que têm a fazer, e no final carregam ESC, escrevem ':wq' e carregam ENTER

security:
  authorization: enabled
  keyFile: /mongo/keyfile
  
# Agora temos de reniciar o serviço em todos os servidores
# Em cada um executar
> ps aux
# Ver o numero [PID] do processo associado a mongo -f mongod.conf --fork
> kill -9 [PID]

# Depois, lançar os servidor mongo em cada um dos container outra vez
> cd /mongo
> mongod -f mongod.conf --fork

# Como temos autenticação é aconselhável que os acessos via mongosh sejam feitos com as flags -u username -p password, como por exemplo

> mongosh -u rootUserName -p password
# Se for localmente

> mongosh -u rootUserName -p password --host X.X.X.X --port 30001
# Se for, por exemplo, para aceder via mongosh ao servidor mongo do ip X.X.X.X:30001


use admin
db.shutdownServer()

db.getMongo().setReadPref('secondaryPreferred')
rs.stepDown()
rs.reconfig()